一、<%@include file="被包含的页面URI">包含
	1. 作用：将某一个页面包含到另外一个页面中（当页面中的某些部分被重复使用：例如：导航栏、网站底部的版权信息）
	2. 目的：方便维护和重用
	扩展：
	<jsp:include page="被包含的页面URI"/> jsp动作元素（标识）  包含其他页面
	3. 区别
		1. 指令包含的是源代码，动作标识包含的执行结果
		2. 被包含页面没有Java代码，区别不大
		3. 指令（源码）需要变量冲突
		4. 如果重复利用的部分是一些必要的头信息或者是基础变量，建议指令（源码）
		5. 如果重复利用的部分只是一些网页显示的内容（导航栏、页脚），建议动作标识
		6. 注意：可能存在重复的HTML结构标记
二、taglib指令
	1. 作用：导入其他的标签库 （自定义、JSTL jsp的标准标签库）
	2. 目的：JSTL
		减少在JSP页面使用Java，JSTL中包含了 if、for
	3. 语法
		<%@taglib uri="地址" prefix="前缀">
			前缀可以自定义，是为了区分标签是哪一个库里面的。

三、JSP内置对象【重要、掌握】
	1. 内置对象：jsp已经为我们创建好了，直接使用，不需要new对象
	2. 内置对象共9个（需要名称、类型） 
		1. 一个输出 out
		2. 两个HTTP request和response
		3. 三个存储对象 request、session、application
		4. 四个没什么用的对象	page、pageContext、config、exception

四、输出对象out
	1. jspWriter类型
	2. 方法：out.print()
	3. 注意：输出到JSP缓冲区，可能会造成输出顺序和代码顺序不一致
	    【掌握】使用response.getWriter()
	    
五、request和response【重要重要重要】
	1. 类型：HttpServletRequest、HttpServletResponse
	2. 方法、作用
		0. 处理请求行和响应行
		1. 处理HTTP头信息
		2. 处理HTTP实体信息（用户提交的数据）
		3. 处理cookie（存储信息）【后续保存信息的时候再讲】
		4. 处理编码
		5. 递交给其他视图继续处理
	3. 处理HTTP头信息
		1. 得到请求行
			request.get... 请求方式、id地址、请求地址、协议、端口号
			request.getContextPath() 【掌握】获得上下文路径（等同于src或者webcontent）/w
		2. 得到请求头
			request.getHeader("referer") 防盗链
		------------------------------------------------------------
		3. 设置响应状态行
			response.setStatus(200)
				说明：如果设置的状态码表示的是异常，则需要使用response.sendError(500)
		4. 设置响应头
			response.setContentType() 设置响应内容类型
			禁止缓存response.setHeader("Pragma", "No-cache");
					response.setHeader("Cache-Control", "no-cache");
					response.setDateHeader("Expires", 0);
			自动刷新和自动跳转
				response.setHeader("refresh", "时间（秒）");	
				response.setHeader("refresh", "时间（秒）;url=跳转的网址");
	 4. 处理实体内容【非常重要】
	 	1. request可以接收用户提交的参数【考试】
	 		request.getParamter("参数的名字")
	 			注意：1. 返回的是字符串String 【可能涉及到数据类型转换】
	 				2. 如果参数的名字不存在（没有给控件name属性，或者你写错了），则返回null 【注意空指针异常】
	 				3. 此方法只适用于只有一个值的时候（name属性相同，且都有值，多个值） 单选、【复选】
	 				4. 如果可能存在多个值，使用request.getParameterValues("参数的名字")
	 					注意：此方法返回的是字符串数组  String[]  ,数组的访问  x[0] x[1]
	 						如果将此方法用来获取唯一值，得到的仍然是数组，只是数组的长度为1
	 	----------------------------------------------------------------------------------
	 	2. response输出内容
	 		response.getWriter()
	 	实践：【考试】用户提交数据并显示
	 		问题：
	 			1. 数组显示的是地址？
	 				解决：foreach for循环
	 			2. 单选、多选、下拉列表没有选择的时候，此控件的值为null
	 				解决：提前对值进行判断
	 			3. get提交方式没有乱码，post乱码？
	 				解决：需要设置编码
	 			4. 其他显示数据的方法Arrays.toString(tags)   EL/JSTL
	 				
	 5. 处理编码
	 	1. request可以用来设置请求参数的编码，防止乱码
	 		request.setCharacterEncoding("utf-8");【掌握】
	 		注意：1.需要在获取参数之前使用，才有效
	 			2. 此方法只适用于post提交方式乱码
	 			3. get提交方式乱码：只能重新构造字符串
	 					XXXXXX(iso8859-1) → 字节数组 010101010100 → 按照新的字符集构造字符串  张三(UTF-8)
	 					username = new String(username.getBytes("乱码的字符集"),"新的字符集");
	  ------------------------------------------------------------------------------------------
	   	2. response可以用来设置响应的编码
	   		response.setCharacterEncoding("utf-8");
	   		注意：
	   			1. 此方法必须在getWriter之前调用
	   			2. 如果是在Servlet中，你还需要设置内容类型，否则通讯可能存在问题
	   			3. 设置内容类型  response.setContentType("text/html");
	   			response.setContentType("text/html;charset=utf-8");【掌握】
	   6. 递交给其他视图继续处理
	   		1. request请求转发（将请求转给其他视图）
	   			request.getRequestDispatcher("teacher.jsp").forward(request, response);【掌握】
	   		2. response重定向（让客户端重新去请求新的视图）
	 			response.sendRedirect("teacher.jsp");	【掌握】
	 		3. 区别
	 			1. 请求转发URL不发生变化；重定向会发生变化；
	 			2. 请求转发只有一次请求，一次响应；重定向多次请求，多次响应；
	 			3. 请求转发携带参数；重定向不携带参数；
	 			4. 请求转发一般在服务内部，包括不可直接访问路径WEB-INF；重定向可以是任意URL；
	 			5. 请求转发可能会存在相对地址错误（URL和内容不一致）
	 				解决：将相对地址改为相对服务器地址(获取上下文路径)request.getContextPath()
	 	
			
		
		
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		