一、MVC
	1. model模型 View 视图 controller控制器
	2. 设计思想（解耦）增加模块的可重用性和可维护性
	3. 将程序按照功能或者角色进行划分
		视图：显示、展示（能看见）
		控制器：控制业务流程（决定后续应该做些什么）
		模型：实现具体的业务
	4. 在Java Web中
		HTML、JSP视图 →  Servlet控制器  → JavaBean模型（Java类）
			V          C			M
二、前端基础
	1. 路径
		1. 绝对路径（路径清晰、外部资源）--路径太长
		2. 相对路径（以相对位置来省略前面的部分）--随着相对位置的变化而变化
		3. 相对服务器路径（以服务器上下文路径最为参考）【掌握】
	2. 表单【考试】
		1. 属性
			action 表单的提交去向
			method 提交方式
			enctype编码方式
		2. input
			<input type="" />
				text 文本    password密码  radio单选 checkbox复选
					注意：单选按钮的name必须一致（同一组）、复选建议一致
				提交submit 重置	reset 普通 button 图像 image
				hidden隐藏域 file文件域
		3. 其他控件
			select(size="" multiple="multiple")下拉列表  textarea文本区域标记
		4. 前端发送数据给后端【所有的控件必须有name属性】
	3. CSS
		1. CSS编写规则（语法）
		2. CSS三种样式表
		3. 常用的选择器和属性
			div标签：表示选中网页中的所有div
			ID选择：#    class选择器： .
	4. JS【掌握】
		1. 函数和变量的声明
		2. 函数的事件
			onchange 值被改变并且失去焦点（验证某一个输入是否符合要求）eg. 用户注册（验证该用户名是否被占用）
			onsumbit 表单提交时触发（验证整个表单的内容是否符合要求）
				return  false表单不能提交  true默认
		3. <button onclick=""></button>     btn.onclick = function(){}
		4. document.getElementById("id") 获取网页元素
		5. 修改文本和修改值
		6. 验证数据的方法【掌握】
			1. 判断用户是否输入了内容   ==""
			2. 判断用户输入的是否是数字（成绩、年龄）  isNaN()
			3. 其他复杂判断
				正则表达式.test()
	实践：
		1. 网页中表单：注册
		2. 要求：姓名、密码、年龄
		3. 验证：
			1.姓名不能为空
			2.密码不少于6位
			3.年龄不能为空且必须是数字
			4.需要进行提示（在对应的控件后面用红色的字进行提示）				
	
三、JSP技术
	1. JSP概念
		1. Java server page : Java服务器页面
		2. java + html 
	2. JSP的执行过程
		请求  → JSP容器会将jsp文件转换为Servlet（.java）→编译为字节码.class →运行
	3. 技术
		HTML：html
		JSP：html+Java+处理http（Servlet）
			Servlet的升级之后的产物(在Servlet中输出网页非常的麻烦，所以将网页部分抽离出来)
		Servlet：.java Java编写的服务器程序（java+HTTP接口：接收请求和处理数据并响应 入口service方法）
		Java：.java Java类（一般不能直接运行，需要有main入口）
	4. 构成
		html + java（jsp代码段）+ jsp指令
	5. JSP中的语法
		·定义变量 <%   %>
		·java代码段 <%  Java代码（加分号） %>
		·定义全局变量 <%!   %>
		·注释 <%--  --%>
		·显示表达式 <%=变量 （没有分号）   %> 【掌握】
		·添加页面指令 <%@  %>
	6. 指令 （page页面本身、include导入其他页面、taglib导入标签库JSTL）
		<%@ 指令 属性1="属性值1" 属性2="属性值2" 属性3="属性值3"%>
		
		
		Alt + / 强制提示
		WEB-INF/  404 不可访问
		 
四、指令
	1. page属性
		·language 当前页面的编写语言 取值Java
		·contentType 告知浏览器解析时的文件类型以及编码【掌握】MIME
		·pageEncoding页面转换时的编码
		·buffer JSP缓冲区的大小 ，如果设置为0kb，不缓存内容，直接输出
		·extends、import 继承其他的类、导入其他的类
			<%@page import="java.util.Date"%>
		·errorPage--声明处理错误的页面位置（URL） 假设A页面存在错误，但是A不处理，声明由B来进行错误处理
			如果程序存在错误，不处理，非常不友好
		·isErrorPage--承认是否是处理错误  B页面承认自己是处理错误（不设置这个属性，不能接收到A的错误信息）
			如果承认是处理错误的，错误信息自动保存在内置对象（不需要new能直接使用）exception
			
	2. 常见的运行时异常【考试】
		1. 算术逻辑异常
		2. 数组越界
		3. 空指针异常（不是在调用方法的时候出错，检查赋值方法内部是否正确）
		4. 数字格式转换异常[很多]
		5. 类的类型转换异常
		【掌握】如何解决
			1. try catch
			2. 按照实际情况进行预先判断 if
	3. 问题：不显示自定义的错误页面，显示ie的提示		
		1. 在internet explorer的选项中关闭HTTP友好提示信息
		2. 增加错误页面信息至超过1024字节
		3.[掌握]将错误信息页面状态码从500修改为200(告知浏览器，这个错误是我们允许的，正常运行)
		
		A存在错误（设置B的路径）  ----> B页面来解决
		问题：
			如果没有A？
				404未见未找到
			如果有很多个类似A？  多个页面相同的异常如何处理？
				A1、A2/A3....An   ----> B页面来解决
		解决：为网站配置全局的错误页面
			1. 错误代码 例如404
			2. 错误类型
		
		
		
		
		
		
		
		
		
		
		
		
		